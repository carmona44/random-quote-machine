{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","react_default","a","createElement","className","src","logo","alt","App_Quote","Component","Quote","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","randomQuote","randomQuoteAuthor","tweetURL","getRandomQuote","bind","assertThisInitialized","_this2","fetch","then","res","json","setState","randomNum","Math","floor","random","length","obj","quote","author","encodeURIComponent","id","href","title","target","rel","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAQMA,0LAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,2CAEFF,EAAAC,EAAAC,cAACK,EAAD,cARUC,cAcZC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,GACRC,YAAa,GACbC,kBAAmB,GACnBC,SAAU,IAEZX,EAAKY,eAAiBZ,EAAKY,eAAeC,KAApBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KARNA,oFAWE,IAAAe,EAAAZ,KAChBa,MAAM,0IACDC,KAAK,SAACC,GACH,OAAOA,EAAIC,SAEdF,KAAK,SAACC,GACHH,EAAKK,SAAS,CACVZ,OAAQU,EAAIV,WAEjBS,KAAK,WACLF,EAAKH,4DAKZ,IAAIS,EAAYC,KAAKC,MAAMD,KAAKE,SAAWrB,KAAKI,MAAMC,OAAOiB,QACzDC,EAAMvB,KAAKI,MAAMC,OAAOa,GAC5BlB,KAAKiB,SAAS,CACXX,YAAaiB,EAAIC,MACjBjB,kBAAmBgB,EAAIE,OACvBjB,SAAU,8EAAgFkB,mBAAmB,IAAMH,EAAIC,MAAQ,OAASD,EAAIE,2CAK/I,OAAGzB,KAAKI,MAAMC,OAAOiB,OAAS,EAEtBpC,EAAAC,EAAAC,cAAA,OAAKuC,GAAG,aACJzC,EAAAC,EAAAC,cAAA,OAAKuC,GAAG,UACJzC,EAAAC,EAAAC,cAAA,KAAGuC,GAAG,QAAN,IAAe3B,KAAKI,MAAME,YAA1B,KACApB,EAAAC,EAAAC,cAAA,KAAGuC,GAAG,UAAN,MAAmB3B,KAAKI,MAAMG,oBAElCrB,EAAAC,EAAAC,cAAA,OAAKuC,GAAG,WACNzC,EAAAC,EAAAC,cAAA,KAAGuC,GAAG,cAActC,UAAU,SAASuC,KAAM5B,KAAKI,MAAMI,SAAUqB,MAAM,mBAAmBC,OAAO,SAASC,IAAI,uBAAsB7C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAClJH,EAAAC,EAAAC,cAAA,UAAQuC,GAAG,YAAYK,KAAK,SAAS3C,UAAU,kBAAkB4C,QAASjC,KAAKS,gBAA/E,gBAKHvB,EAAAC,EAAAC,cAAA,oCAnDIM,aAwDNT,IClEKiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.262643c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//Imports redux\n//import { Provider, connect } from 'react-redux';\n//import { createStore, combineReducers, applyMiddleware } from 'redux';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h3>Random quote machine project</h3>\n        </header>\n        <Quote />\n      </div>\n    );\n  }\n}\n\nclass Quote extends  Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      quotes: [],\n      randomQuote: '',\n      randomQuoteAuthor: '',\n      tweetURL: ''\n    };\n    this.getRandomQuote = this.getRandomQuote.bind(this);\n  }\n\n  componentWillMount(){\n      fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n          .then((res) => {\n              return res.json();\n          })\n          .then((res) => {\n              this.setState({\n                  quotes: res.quotes\n              });\n          }).then(() => {\n             this.getRandomQuote();\n          });\n  }\n\n  getRandomQuote(){\n      var randomNum = Math.floor(Math.random() * this.state.quotes.length);\n      var obj = this.state.quotes[randomNum];\n      this.setState({\n         randomQuote: obj.quote,\n         randomQuoteAuthor: obj.author,\n         tweetURL: 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + obj.quote + '\" - ' + obj.author)\n      });\n  }\n\n  render(){\n      if(this.state.quotes.length > 0) {\n          return (\n              <div id=\"quote-box\">\n                  <div id=\"textos\">\n                      <p id=\"text\">\"{this.state.randomQuote}\"</p>\n                      <p id=\"author\"> - {this.state.randomQuoteAuthor}</p>\n                  </div>\n                  <div id=\"buttons\">\n                    <a id=\"tweet-quote\" className=\"button\" href={this.state.tweetURL} title=\"Tuitea esta cita\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-twitter-square\"></i></a>\n                    <button id=\"new-quote\" type=\"button\" className=\"btn btn-primary\" onClick={this.getRandomQuote}>Nueva cita</button>\n                  </div>\n              </div>\n          );\n      } else {\n          return <p>Cargando cita...</p>;\n      }\n  }\n}\n\nexport default App;\n\n// EJEMPLO RECOMENDADO FREECODECAMP\n\n// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import { Provider, connect } from 'react-redux'\n// import { createStore, combineReducers, applyMiddleware } from 'redux'\n// import thunk from 'redux-thunk'\n\n// import rootReducer from './redux/reducers'\n// import App from './components/App'\n\n// const store = createStore(\n//   rootReducer,\n//   applyMiddleware(thunk)\n// );\n\n// ReactDOM.render(\n//   <Provider store={store}>\n//     <App/>\n//   </Provider>,\n//   document.getElementById('root')\n// );\n\n// change code below this line","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}